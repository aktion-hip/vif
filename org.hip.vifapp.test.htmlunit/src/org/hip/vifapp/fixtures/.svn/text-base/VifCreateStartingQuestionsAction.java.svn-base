/*
	This package is part of the application VIF.
	Copyright (C) 2009, Benno Luthiger

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
package org.hip.vifapp.fixtures;

import java.util.List;

import com.gargoylesoftware.htmlunit.html.HtmlAnchor;
import com.gargoylesoftware.htmlunit.html.HtmlCheckBoxInput;
import com.gargoylesoftware.htmlunit.html.HtmlForm;
import com.gargoylesoftware.htmlunit.html.HtmlInput;
import com.gargoylesoftware.htmlunit.html.HtmlParagraph;
import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;
import com.gargoylesoftware.htmlunit.html.HtmlTableRow;

/**
 *
 * @author Luthiger
 * Created 15.02.2009 
 */
public class VifCreateStartingQuestionsAction extends VifAdminFixture {

	public VifCreateStartingQuestionsAction(String inPort) {
		super(inPort);
	}

	/* (non-Javadoc)
	 * @see org.hip.vifapp.fixtures.VifFixture#getRequestType()
	 */
	@Override
	protected String getRequestType() {
		return null;
	}
	
	public boolean activate(String inGroupID) throws Exception {
		List<HtmlTableRow> lRows = getTableRows(String.format(XPATH_TR, "dataSmall odd"), String.format(XPATH_TR, "dataSmall even"));		
		HtmlAnchor lAnchor = null;
		for (HtmlTableRow lRow : lRows) {
			if (inGroupID.equals(lRow.getCell(1).asText())) {
				lAnchor = (HtmlAnchor)lRow.getCell(1).getFirstChild();
			}
		}
		if (lAnchor == null) {
			return false;
		}
		setSuccess(getActionPageChecked(lAnchor.click()));
		return true;
	}
	
	public boolean createQuestionWithRemark(String inQuestion, String inRemark) throws Exception {
		HtmlForm lForm = getSuccess().getFormByName("Form");
		setTextArea(lForm, "fldQuestion", inQuestion);
		setTextArea(lForm, "fldRemark", inRemark);
		
		final HtmlSubmitInput lSend = (HtmlSubmitInput) lForm.getInputByName("cmdSend");
		setSuccess(getActionPageChecked(lSend.click()));
		
		return true;
	}

	public String stateOfQuestion(String inQuestion) throws Exception {
		List<HtmlTableRow> lRows = getTableRows(String.format(XPATH_TR, "odd"), String.format(XPATH_TR, "even"));
		for (HtmlTableRow lRow : lRows) {
			if (inQuestion.equals(lRow.getCell(1).asText())) {
				return lRow.getCell(2).asText();
			}
		}
		return "";
	}
	
	public boolean publish(String inQuestion) throws Exception {
		List<HtmlTableRow> lRows = getTableRows(String.format(XPATH_TR, "odd"), String.format(XPATH_TR, "even"));
		for (HtmlTableRow lRow : lRows) {
			if (inQuestion.equals(lRow.getCell(2).asText())) {
				((HtmlCheckBoxInput)lRow.getCell(0).getFirstChild()).setChecked(true);
			}
		}
		HtmlForm lForm = getSuccess().getFormByName("Form");
		HtmlInput lSend = lForm.getInputByName("actionButton");
		setSuccess(getActionPageChecked(lSend.click()));		
		return true;
	}
	
	public String content() throws Exception {
		return ((HtmlParagraph)getSuccess().getByXPath("//p[@class='data']").get(0)).asText();
	}
	
	public String numberOfContributions() throws Exception {
		return String.valueOf(getTableRows(String.format(XPATH_TR, "odd"), String.format(XPATH_TR, "even")).size());		
	}
	
	public String getGroupId(String inGroupName) throws Exception {		
		return getGroupId(inGroupName, 1, getTableRows(String.format(XPATH_TR, "dataSmall odd"), String.format(XPATH_TR, "dataSmall even")));
	}
	
}
